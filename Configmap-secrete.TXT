security context : We can set security context on pod , container level so that it container will be restricted based on security context define in pod yml or deployment yml .
===========     in below exampl container will start with user id 405  becuase we set using security context under spec where we define contauners property.
root@master:~# cat example2.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-deployment
  labels:
    app: test
spec:
  replicas: 3
  selector:
    matchLabels:
      app: test
  template:
    metadata:
      labels:
        app: test
    spec:
      securityContext:
          runAsUser: 405
      containers:
      - name: test
        image: alpine
        command: [ "/bin/sleep", "999999" ]


root@master:~# kubectl apply -f example2.yml
deployment.apps/test-deployment created

root@master:~# kubectl get pods
NAME                              READY   STATUS    RESTARTS   AGE
envar-demo                        1/1     Running   0          60m
test-deployment-64777cd5b-9rwtl   1/1     Running   0          8s
test-deployment-64777cd5b-kprk5   1/1     Running   0          8s
test-deployment-64777cd5b-t5scl   1/1     Running   0          8s


root@master:~# kubectl exec test-deployment-64777cd5b-9rwtl id
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future versi                                                                                        on. Use kubectl exec [POD] -- [COMMAND] instead.
uid=405(guest) gid=100(users) groups=100(users)
root@master:~# kubectl exec test-deployment-64777cd5b-9rwtl -it sh
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future versi                                                                                        on. Use kubectl exec [POD] -- [COMMAND] instead.
/ $ hostname
test-deployment-64777cd5b-9rwtl
/ $ id
uid=405(guest) gid=100(users) groups=100(users)

======================================Secrete in k8=========================

Secret creation via cmd line:
-------------------------------------

root@master:~# kubectl create secret generic  mariadb-user-creds  --from-literal=MYSQL_USER=kubeuser --from-literal=MYSQL_PASSWORD=kube-still-rocks
secret/mariadb-user-creds created

root@master:~# kubectl get secret
NAME                 TYPE     DATA   AGE
mariadb-user-creds   Opaque   2      27s

root@master:~# kubectl describe secret mariadb-user-creds
Name:         mariadb-user-creds
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
MYSQL_PASSWORD:  16 bytes
MYSQL_USER:      8 bytes


Secret creation by yaml file (declrative way) :
-----------------------------------------------------------

wget https://raw.githubusercontent.com/syedmudasir20/kubernetes-content/main/mysql-secret.yml

wget https://raw.githubusercontent.com/syedmudasir20/kubernetes-content/main/mariadb-deployment.yml

root@master:~# cat mysql-secret.yml
apiVersion: v1
kind: Secret
metadata:
  name: mariadb-root-password
type: Opaque
data:
  password: S3ViZXJuZXRlc1JvY2tzIQ==


root@master:~# kubectl apply -f mysql-secret.yml
secret/mariadb-root-password created
root@master:~# kubectl get secret
NAME                    TYPE     DATA   AGE
mariadb-root-password   Opaque   1      7s
mariadb-user-creds      Opaque   2      14m
root@master:~# kubectl describe secret mariadb-root-password
Name:         mariadb-root-password
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password:  16 bytes
============================================deployment  with secret and configmap example=======================================================

root@master:~# cat mariadb-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      containers:
      - name: mariadb
        image: mariadb:10.4

        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mariadb-root-password
                key: password

        envFrom:
        - secretRef:
            name: mariadb-user-creds

        volumeMounts:
        - name: mariadb-config-volume
          mountPath: /etc/mysql/conf.d


      volumes:
      - name: mariadb-config-volume
        configMap:
          name: mariadb-config
          items:
            - key: max_allowed_packet.cnf
              path: max_allowed_packet.cnf


===============================================deploying secret on pod =================================================================================
here we created a secret user name which is "backend-user" now how we will call this secret things in POD or deployment yaml file .
There are 3 ways to call secret in applications POD or deployment .Out of that 3 methods am discussing now 1st method which is using env as vaiable which will be given to conatainer as variable.
So we can see here in yaml of POD , 
root@master:~# kubectl apply -f envsec.yaml
pod/andy-app-secure created

root@master:~# kubectl get pods
NAME              READY   STATUS              RESTARTS   AGE
andy-app-secure   0/1     ContainerCreating   0          5s

root@master:~# kubectl get pods
NAME              READY   STATUS    RESTARTS   AGE
andy-app-secure   1/1     Running   0          7s

root@master:~# kubectl get pods
NAME              READY   STATUS    RESTARTS   AGE
andy-app-secure   1/1     Running   0          10s

root@master:~# cat envsec.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pod
  name: andy-app-secure
spec:
  containers:
  -  name: c1
     image: nginx
     env:
     - name: secret_test      ----------------------> container 's Env variable "secret_test" , which is taking the data from secret .(key : backend-username and it value is  backend-admin) 
       valueFrom:
         secretKeyRef:
            name: backend-user
            key: backend-username  ----------------------------> this  secret  key  "backend-username"  which value is "backend-admin" which is assigned to the container variable secret_test.


root@master:~# kubectl exec -it andy-app-secure -- sh -c 'echo $secret_test'
backend-admin


root@master:~# kubectl exec -it andy-app-secure -- sh
# hostname
andy-app-secure
# env
KUBERNETES_SERVICE_PORT=443
KUBERNETES_PORT=tcp://10.96.0.1:443
HOSTNAME=andy-app-secure
HOME=/root
PKG_RELEASE=1~bookworm
TERM=xterm
NGINX_VERSION=1.25.1
KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
NJS_VERSION=0.7.12
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
secret_test=backend-admin
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
KUBERNETES_SERVICE_HOST=10.96.0.1
PWD=/
# env | grep -i secret_test
secret_test=backend-admin


================================deploying secret on POD with mulitple secret ===============================================================================
muliple env variables takine data from mulitple secrets how to define them in POD or deployment :
--------------------------------------------------------------------------------------------------------------- 

root@master:~# cat envmultiple.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pod
  name: env-multiple
spec:
  containers:
  - name: c1
    image: nginx
    env:
    - name: BACKEND_USERNAME   -------------------------> env variable 
      valueFrom:
        secretKeyRef:
           name: backend-user
           key: backend-username
    - name: DB_USERNAME            -----------------------------> env variable 
       valueFrom:
         secretKeyRef:
            name: db-user
            key: db-username


root@master:~# kubectl get secret
NAME                    TYPE     DATA   AGE

backend-user            Opaque   1      6h9m      ---------------------------------------> 1st secret
db-user                 Opaque   1      29m            -----------------------------------------> 2nd secret  



root@master:~# vi  envmultiple.yaml
root@master:~# kubectl apply -f envmultiple.yaml

pod/env-multiple created

root@master:~# kubectl get pods

NAME              READY   STATUS    RESTARTS   AGE
andy-app-secure   1/1     Running   0          5h58m
env-multiple      1/1     Running   0          6s


root@master:~# kubectl exec -it env-multiple -- sh -c 'env |grep -i _username'

DB_USERNAME=db-admin
BACKEND_USERNAME=backend-admin

------------------------------------------------------------"envFrom "new style of decalrtion of container variable example-------------------------------------------------------------------------------------------------------------

root@master:~# kubectl create secret generic test-secret --from-literal=username='my-app' --from-literal=password='39528$vdg7jb'
secret/test-secret created

root@master:~# kubectl get secret

NAME                    TYPE     DATA   AGE
test-secret             Opaque   2      7s


root@master:~# kubectl describe secret test-secret
Name:         test-secret
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password:  12 bytes   ------------------> 1st key
username:  6 bytes   --------------------> 2nd key  in same cmd line


root@master:~# vi newsec.yaml
root@master:~# cat newsec.yaml
apiVersion: v1
kind: Pod
metadata:
  name: envfrom-secret-new
spec:
  containers:
  - name: c1
    image: nginx
    envFrom:  --------------------------------------> new style of declartion using envfrom where we donot need to give details only secret  name(test-secret) that is it.
    - secretRef:
        name: test-secret

root@master:~# kubectl apply -f newsec.yaml
pod/envfrom-secret-new created
root@master:~# kubectl get pods
NAME                 READY   STATUS    RESTARTS   AGE
andy-app-secure      1/1     Running   0          7h13m
env-multiple         1/1     Running   0          74m
envfrom-secret-new   1/1     Running   0          7s
root@master:~# kubectl exec -it envfrom-secret-new -- sh -c 'echo $username $password'
my-app 39528$vdg7jb

==========================================configmap creation============================================================================================
Creation of configmap using ENV variable decalrtion method :
------------------------------------------------------------------------------

root@master:~# kubectl create cm andy --from-literal=mydata=hello_world
configmap/andy created
root@master:~# kubectl get cm
NAME               DATA   AGE
andy               1      6s
kube-root-ca.crt   1      7d16h
root@master:~# kubectl describe cm andy
Name:         andy
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
mydata:
----
hello_world

BinaryData
====

Events:  <none>


root@master:~# cat andycm.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pod
  name: cm-pod
spec:
  containers:
  -  name: c1
     image: nginx
     env:
     - name: user_name
       valueFrom:
          configMapKeyRef:
               name: andy
               key: mydata

root@master:~# kubectl exec -it cm-pod -- sh -c 'env | grep -i _name'
user_name=hello_world

Creation of configmap mulitple key pair using new desgin method "envFrom" method :
---------------------------------------------------------------------------------------------------------------

 kubectl create cm sanu --from-literal=user=anand --from-literal=password=lang123
configmap/sanu created
root@master:~# kubectl get cm
NAME               DATA   AGE
andy               1      46m
kube-root-ca.crt   1      7d17h
sanu               2      6s
root@master:~# kubectl describe cm sanu
Name:         sanu
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
password:
----
lang123
user:
----
anand

BinaryData
====

Events:  <none>


root@master:~# cat newcm.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pod
  name: newcm-pod
spec:
  containers:
  -  name: c1
     image: nginx
     envFrom:
     - configMapRef:
           name: sanu

root@master:~# kubectl apply -f newcm.yaml
pod/newcm-pod created

root@master:~# kubectl get pods
NAME                 READY   STATUS    RESTARTS   AGE
andy-app-secure      1/1     Running   0          23h
cm-pod               1/1     Running   0          27m
env-multiple         1/1     Running   0          17h
envfrom-secret-new   1/1     Running   0          16h
newcm-pod            1/1     Running   0          3s

root@master:~# kubectl exec -it newcm-pod -- sh -c 'echo $user $password'
anand lang123

root@master:~# kubectl exec -it newcm-pod -- sh -c 'echo "user-name:$user user-password: $password"'
user-name:anand user-password: lang123

--------------------------------------------------creation of configmap using "volume method"----------------------------------------------------------------------------------------------------------------------------------------------------------
 to create configmap using volume follow below steps:
------------------------------------------------------------

1. Create file 
root@master:~# cat max_allowed_packet.cnf
[mysqld]
max_allowed_packet = 64M

2. Create configmap using this file:

root@master:~# kubectl create configmap mariadb-config --from-file=max_allowed_packet.cnf
configmap/mariadb-config created

root@master:~# kubectl get cm
NAME               DATA   AGE
andy               1      7h23m
kube-root-ca.crt   1      8d
mariadb-config     1      4s
sanu               2      6h36m
root@master:~# kubectl describe cm mariadb-config
Name:         mariadb-config
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
max_allowed_packet.cnf:
----
[mysqld]
max_allowed_packet = 64M


BinaryData
====

Events:  <none>
 
Just we can create yaml as well fron above cmd ..just to show yaml creation :

root@master:~# kubectl create configmap mariadb-config --from-file=max_allowed_packet.cnf --dry-run=client -o yaml
apiVersion: v1
data:
  max_allowed_packet.cnf: |
    [mysqld]
    max_allowed_packet = 64M
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: mariadb-config


Now we need to craete application deployment file using that configmap: This is very nice yaml where we can see secret and configmap both use case:
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

root@master:~# cat mariadb-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mariadb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mariadb
  template:
    metadata:
      labels:
        app: mariadb
    spec:
      containers:
      - name: mariadb
        image: mariadb:10.4

        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mariadb-root-password
                key: password
                key: andyname

        envFrom:
        - secretRef:
            name: mariadb-user-creds

        volumeMounts:
        - name: mariadb-config-volume
          mountPath: /etc/mysql/conf.d


      volumes:
      - name: mariadb-config-volume
        configMap:
          name: mariadb-config
          items:
            - key: max_allowed_packet.cnf
              path: max_allowed_packet.cnf



root@master:~# kubectl get secret
NAME                    TYPE     DATA   AGE
andy-credentials        Opaque   2      31h
backend-user            Opaque   1      30h
db-user                 Opaque   1      25h
mariadb-root-password   Opaque   2      2d13h
mariadb-user-creds      Opaque   2      2d14h
test-secret             Opaque   2      23h

root@master:~# kubectl describe secret mariadb-root-password
Name:         mariadb-root-password
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password:  16 bytes
andyname:  13 bytes

root@master:~# kubectl describe secret mariadb-user-creds
Name:         mariadb-user-creds
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
MYSQL_PASSWORD:  16 bytes
MYSQL_USER:      8 bytes



root@master:~# kubectl apply -f mariadb-deployment1.yml
deployment.apps/mariadb-deployment created

root@master:~# kubectl get deployment
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
mariadb-deployment   0/1     1            0           6s
root@master:~# kubectl get deployment
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
mariadb-deployment   0/1     1            0           8s
root@master:~# kubectl get deployment
NAME                 READY   UP-TO-DATE   AVAILABLE   AGE
mariadb-deployment   1/1     1            1           11s

root@master:~# kubectl get pods
NAME                                 READY   STATUS    RESTARTS   AGE
andy-app-secure                      1/1     Running   0          30h
cm-pod                               1/1     Running   0          7h18m
env-multiple                         1/1     Running   0          24h
envfrom-secret-new                   1/1     Running   0          23h
mariadb-deployment-8b77c848d-7gl4n   1/1     Running   0          24s
newcm-pod                            1/1     Running   0          6h50m

root@master:~# kubectl exec -it mariadb-deployment-8b77c848d-7gl4n bash
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.

root@mariadb-deployment-8b77c848d-7gl4n:/# hostname
mariadb-deployment-8b77c848d-7gl4n

root@mariadb-deployment-8b77c848d-7gl4n:/# cd /etc/mysql/conf.d/
root@mariadb-deployment-8b77c848d-7gl4n:/etc/mysql/conf.d# ls
max_allowed_packet.cnf
root@mariadb-deployment-8b77c848d-7gl4n:/etc/mysql/conf.d# cat max_allowed_packet.cnf
[mysqld]
max_allowed_packet = 64M


Now we will edit the configmap  with 64M to 128M and we will see at run time container will update this info without downtime.
This feature is only available when we are using volume method in configmap
--------------------------------------------------------------------------------------------------------------------------------------------------------
root@master:~# kubectl edit cm mariadb-config
configmap/mariadb-config edited

root@master:~# kubectl exec -it mariadb-deployment-8b77c848d-7gl4n -- sh -c "cat /etc/mysql/conf.d/max_allowed_packet.cnf"
[mysqld]
max_allowed_packet = 128M

