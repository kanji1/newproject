wget https://raw.githubusercontent.com/syedmudasir20/kubernetes-objects/main/cip-service.yml
controlplane $ kubectl get pods
NAME         READY   STATUS    RESTARTS   AGE
first-pod    1/1     Running   0          13m
second-pod   1/1     Running   0          13m
controlplane $ kubectl get pods -owide 
NAME         READY   STATUS    RESTARTS   AGE   IP            NODE     NOMINATED NODE   READINESS GATES
first-pod    1/1     Running   0          13m   192.168.1.3   node01   <none>           <none>
second-pod   1/1     Running   0          13m   192.168.1.4   node01   <none>           <none>
controlplane $ curl 192.168.1.3:8080
Hello, world!
Version: 1.0.0
Hostname: first-pod
controlplane $ curl 192.168.1.4:8080
Hello, world!
Version: 2.0.0
Hostname: second-pod

================================

controlplane $ kubectl get pods --show-labels
NAME         READY   STATUS    RESTARTS   AGE   LABELS
first-pod    1/1     Running   0          20m   app=hello-world-app
second-pod   1/1     Running   0          19m   app=hello-world-app
controlplane $ vi cip-service.yml
controlplane $ kubectl apply -f cip-service.yml 
service/andycip-service created
controlplane $ kubectl get svc
NAME              TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE
andycip-service   ClusterIP   10.99.92.211   <none>        80/TCP    5s
kubernetes        ClusterIP   10.96.0.1      <none>        443/TCP   22d
controlplane $ kubectl get pods -o wide
NAME         READY   STATUS    RESTARTS   AGE   IP            NODE     NOMINATED NODE   READINESS GATES
first-pod    1/1     Running   0          21m   192.168.1.3   node01   <none>           <none>
second-pod   1/1     Running   0          21m   192.168.1.4   node01   <none>           <none>
Now we can see we are doin curl using culster IP instaed of using individual PODs IP whoch shows loadbalcing is happening.
controlplane $ curl 10.99.92.211
Hello, world!
Version: 2.0.0
Hostname: second-pod

controlplane $ curl 10.99.92.211
Hello, world!
Version: 1.0.0
Hostname: first-pod
controlplane $ curl 10.99.92.211
Hello, world!
Version: 2.0.0
Hostname: second-pod
controlplane $ curl 10.99.92.211
Hello, world!
Version: 1.0.0
Hostname: first-pod
controlplane $ cat cip-service.yml
apiVersion: v1
kind: Service
metadata:
  name: andycip-service
spec:
  type: ClusterIP
  selector:
    app: hello-world-app ======>> this should be the labels of POD . we can see both the pods having same lables.Service catch the pod
                                       using lable .Not by POD name or POD IP .
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
